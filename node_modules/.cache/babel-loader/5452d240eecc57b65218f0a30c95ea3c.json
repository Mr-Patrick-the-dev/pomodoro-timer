{"ast":null,"code":"import { minutesToDuration, secondsToDuration } from \"../../utils/duration\";\nimport activeSessionCheck from \"./active-session-check\"; // This will take in the session timer (focus/break), the current value, and a max to check to see if the current value is there\n\nexport const checkMax = (value, num, max) => {\n  // Check if focus is being adjusted\n  if (value === \"focusTimer\") {\n    // If the timer is not maxed out, return 5 minutes (300 seconds)\n    if (num < max) {\n      return 300;\n    } else {\n      // If the timer is maxed out, return 0\n      return 0;\n    }\n\n    ;\n  } else {\n    // If break timer is being adjusted\n    if (num < max) {\n      return 60;\n    } else {\n      return 0;\n    }\n\n    ;\n  }\n}; // This will take in the session timer (focus/break), the current value, and a min to check to see if the current value is there\n\nexport const checkMin = (value, num, min) => {\n  // Check if focus is being adjusted\n  if (value === \"focusTimer\") {\n    // If the timer is not at it's minimum, return 5 minutes (300 seconds)\n    if (num > min) {\n      return 300;\n    } else {\n      // If the timer is at it's minimum, return 0\n      return 0;\n    }\n\n    ;\n  } else {\n    // If break timer is being adjusted\n    if (num > min) {\n      return 60;\n    } else {\n      return 0;\n    }\n\n    ;\n  }\n\n  ;\n}; // This will take in a number and see if it is less than 3600 in seconds (equating to 60 min/ 1 Hour)\n\nexport const checkHour = num => {\n  if (num < 3600) {\n    // If less than 60 minutes in seconds, should return the number converted using seconds to Duration\n    return secondsToDuration(num);\n  } else {\n    // Once the number is equal to 60 minutes in seconds, return the number divided by 60 presented as minutes\n    return minutesToDuration(num / 60);\n  }\n\n  ;\n}; //Calculates the time remaining based on the current session, timers, and time elapsed\n\nexport const timeRemaining = (elapsed, sessionStatus, focusTimer, breakTimer) => {\n  return activeSessionCheck(sessionStatus, focusTimer, breakTimer) - elapsed;\n}; // Calculates the percentage completed based on the current session, timers, and time elapsed\n\nexport const percentage = (elapsed, sessionStatus, focusTimer, breakTimer) => {\n  return elapsed / activeSessionCheck(sessionStatus, focusTimer, breakTimer) * 100;\n};","map":{"version":3,"sources":["C:/Users/patri/Desktop/Thinkful/React state management/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/sideFunctions/math-equations.js"],"names":["minutesToDuration","secondsToDuration","activeSessionCheck","checkMax","value","num","max","checkMin","min","checkHour","timeRemaining","elapsed","sessionStatus","focusTimer","breakTimer","percentage"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,iBAA5B,QAAsD,sBAAtD;AACA,OAAOC,kBAAP,MAA+B,wBAA/B,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,GAAR,EAAaC,GAAb,KAAqB;AAC3C;AACA,MAAIF,KAAK,KAAK,YAAd,EAA4B;AAC1B;AACE,QAAIC,GAAG,GAAGC,GAAV,EAAgB;AACd,aAAO,GAAP;AACD,KAFD,MAEO;AACL;AACA,aAAO,CAAP;AACD;;AAAA;AACF,GARH,MAQS;AACL;AACE,QAAID,GAAG,GAAGC,GAAV,EAAgB;AACd,aAAO,EAAP;AACH,KAFC,MAEK;AACL,aAAO,CAAP;AACD;;AAAA;AACF;AACF,CAlBI,C,CAoBP;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAACH,KAAD,EAAQC,GAAR,EAAaG,GAAb,KAAqB;AAC3C;AACA,MAAIJ,KAAK,KAAK,YAAd,EAA4B;AAC1B;AACE,QAAIC,GAAG,GAAGG,GAAV,EAAe;AACX,aAAO,GAAP;AACH,KAFD,MAEO;AACL;AACE,aAAO,CAAP;AACH;;AAAA;AACF,GARH,MAQS;AACL;AACE,QAAIH,GAAG,GAAGG,GAAV,EAAe;AACb,aAAO,EAAP;AACH,KAFC,MAEK;AACL,aAAO,CAAP;AACD;;AAAA;AACF;;AAAA;AACF,CAlBI,C,CAoBP;;AACA,OAAO,MAAMC,SAAS,GAAIJ,GAAD,IAAS;AAChC,MAAIA,GAAG,GAAG,IAAV,EAAgB;AACd;AACA,WAAOJ,iBAAiB,CAACI,GAAD,CAAxB;AACD,GAHD,MAGO;AACL;AACA,WAAOL,iBAAiB,CAACK,GAAG,GAAC,EAAL,CAAxB;AACD;;AAAA;AACF,CARM,C,CAUP;;AACA,OAAO,MAAMK,aAAa,GAAG,CAACC,OAAD,EAAUC,aAAV,EAAyBC,UAAzB,EAAqCC,UAArC,KAAoD;AAC/E,SAAOZ,kBAAkB,CAACU,aAAD,EAAgBC,UAAhB,EAA4BC,UAA5B,CAAlB,GAA4DH,OAAnE;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMI,UAAU,GAAG,CAACJ,OAAD,EAAUC,aAAV,EAAyBC,UAAzB,EAAqCC,UAArC,KAAoD;AAC5E,SAAQH,OAAO,GAACT,kBAAkB,CAACU,aAAD,EAAgBC,UAAhB,EAA4BC,UAA5B,CAA1B,GAAkE,GAA1E;AACD,CAFM","sourcesContent":["import { minutesToDuration, secondsToDuration }  from \"../../utils/duration\";\r\nimport activeSessionCheck from \"./active-session-check\";\r\n\r\n// This will take in the session timer (focus/break), the current value, and a max to check to see if the current value is there\r\nexport const checkMax = (value, num, max) => {\r\n  // Check if focus is being adjusted\r\n  if (value === \"focusTimer\") {\r\n    // If the timer is not maxed out, return 5 minutes (300 seconds)\r\n      if (num < max ) {\r\n        return 300;\r\n      } else {\r\n        // If the timer is maxed out, return 0\r\n        return 0;\r\n      };\r\n    } else {\r\n      // If break timer is being adjusted\r\n        if (num < max ) {\r\n          return 60;\r\n      } else {\r\n        return 0;\r\n      };\r\n    }\r\n  };\r\n\r\n// This will take in the session timer (focus/break), the current value, and a min to check to see if the current value is there\r\nexport const checkMin = (value, num, min) => {\r\n  // Check if focus is being adjusted\r\n  if (value === \"focusTimer\") {\r\n    // If the timer is not at it's minimum, return 5 minutes (300 seconds)\r\n      if (num > min) {\r\n          return 300;\r\n      } else {\r\n        // If the timer is at it's minimum, return 0\r\n          return 0;\r\n      };\r\n    } else {\r\n      // If break timer is being adjusted\r\n        if (num > min) {\r\n          return 60;\r\n      } else {\r\n        return 0;\r\n      };\r\n    };\r\n  };\r\n\r\n// This will take in a number and see if it is less than 3600 in seconds (equating to 60 min/ 1 Hour)\r\nexport const checkHour = (num) => {\r\n  if (num < 3600) {\r\n    // If less than 60 minutes in seconds, should return the number converted using seconds to Duration\r\n    return secondsToDuration(num);\r\n  } else {\r\n    // Once the number is equal to 60 minutes in seconds, return the number divided by 60 presented as minutes\r\n    return minutesToDuration(num/60);\r\n  };\r\n};\r\n\r\n//Calculates the time remaining based on the current session, timers, and time elapsed\r\nexport const timeRemaining = (elapsed, sessionStatus, focusTimer, breakTimer) => {\r\n  return activeSessionCheck(sessionStatus, focusTimer, breakTimer) - elapsed;\r\n};\r\n\r\n// Calculates the percentage completed based on the current session, timers, and time elapsed\r\nexport const percentage = (elapsed, sessionStatus, focusTimer, breakTimer) => {\r\n  return (elapsed/activeSessionCheck(sessionStatus, focusTimer, breakTimer)*100);\r\n};"]},"metadata":{},"sourceType":"module"}