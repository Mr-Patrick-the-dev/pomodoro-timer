{"ast":null,"code":"function SessionRunning({\n  focusTimer,\n  breakTimer,\n  elapsed,\n  timeRemaining,\n  sessionStatus\n}) {\n  //Set object to be updated every second and returned to update the states\n  let sessionStatuses = {\n    elapsed: elapsed,\n    timeRemaining: timeRemaining,\n    sessionStatus: sessionStatus,\n    focusTimer: focusTimer,\n    breakTimer: breakTimer\n  }; //Check that the session status is set to Focus\n\n  if (sessionStatuses.sessionStatus === \"Focus\") {\n    //Check that the time elapsed is still less than the timer set\n    if (sessionStatuses.elapsed < sessionStatuses.focusTimer) {\n      //Add 1 second to elapsed\n      sessionStatuses.elapsed = sessionStatuses.elapsed + 1; //Update timeRemaining with focusTimer-elapsed\n\n      sessionStatuses.timeRemaining = sessionStatuses.focusTimer - sessionStatuses.elapsed; //Return the updated sessionStatuses\n\n      return sessionStatuses;\n    } else {\n      //Focus timer is up, switch status to Break, timeRemaining to breakTimer, and set elapsed to 0\n      sessionStatuses.sessionStatus = \"Break\";\n      sessionStatuses.timeRemaining = sessionStatuses.breakTimer;\n      sessionStatuses.elapsed = 0;\n      return sessionStatuses;\n    }\n  } else {\n    //This signifies sessionStatus is set to Break\n    //Check that time elapsed is still less than timer set\n    if (sessionStatuses.elapsed < sessionStatuses.breakTimer) {\n      sessionStatuses.elapsed = sessionStatuses.elapsed + 1;\n      sessionStatuses.timeRemaining = sessionStatuses.breakTimer - elapsed;\n      return sessionStatuses;\n    } else {\n      //Break timer is up, follow same procedure above\n      sessionStatuses.sessionStatus = \"Focus\";\n      sessionStatuses.timeRemaining = sessionStatuses.focusTimer;\n      sessionStatuses.elapsed = 0;\n      return sessionStatuses;\n    }\n\n    ;\n  }\n\n  ;\n}\n\n;\nexport default SessionRunning;","map":{"version":3,"sources":["C:/Users/patri/Desktop/Thinkful/React state management/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/sideFunctions/FocusTimer.js"],"names":["SessionRunning","focusTimer","breakTimer","elapsed","timeRemaining","sessionStatus","sessionStatuses"],"mappings":"AAAA,SAASA,cAAT,CAAwB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,UAAd;AAA0BC,EAAAA,OAA1B;AAAmCC,EAAAA,aAAnC;AAAkDC,EAAAA;AAAlD,CAAxB,EAA2F;AACzF;AACA,MAAIC,eAAe,GAAG;AACpBH,IAAAA,OAAO,EAAEA,OADW;AAEpBC,IAAAA,aAAa,EAAEA,aAFK;AAGpBC,IAAAA,aAAa,EAAEA,aAHK;AAIpBJ,IAAAA,UAAU,EAAEA,UAJQ;AAKpBC,IAAAA,UAAU,EAAEA;AALQ,GAAtB,CAFyF,CAUzF;;AACA,MAAII,eAAe,CAACD,aAAhB,KAAkC,OAAtC,EAA+C;AAC7C;AACA,QAAIC,eAAe,CAACH,OAAhB,GAA0BG,eAAe,CAACL,UAA9C,EAA0D;AACxD;AACAK,MAAAA,eAAe,CAACH,OAAhB,GAA0BG,eAAe,CAACH,OAAhB,GAA0B,CAApD,CAFwD,CAGxD;;AACAG,MAAAA,eAAe,CAACF,aAAhB,GAAgCE,eAAe,CAACL,UAAhB,GAA6BK,eAAe,CAACH,OAA7E,CAJwD,CAKxD;;AACA,aAAOG,eAAP;AACD,KAPD,MAOO;AACL;AACAA,MAAAA,eAAe,CAACD,aAAhB,GAAgC,OAAhC;AAEAC,MAAAA,eAAe,CAACF,aAAhB,GAAgCE,eAAe,CAACJ,UAAhD;AAEAI,MAAAA,eAAe,CAACH,OAAhB,GAA0B,CAA1B;AAEA,aAAOG,eAAP;AACD;AACF,GAnBD,MAmBO;AACL;AACA;AACA,QAAIA,eAAe,CAACH,OAAhB,GAA0BG,eAAe,CAACJ,UAA9C,EAA0D;AAC1DI,MAAAA,eAAe,CAACH,OAAhB,GAA0BG,eAAe,CAACH,OAAhB,GAA0B,CAApD;AAEAG,MAAAA,eAAe,CAACF,aAAhB,GAAgCE,eAAe,CAACJ,UAAhB,GAA6BC,OAA7D;AAEA,aAAOG,eAAP;AACC,KAND,MAMO;AACL;AACAA,MAAAA,eAAe,CAACD,aAAhB,GAAgC,OAAhC;AAEAC,MAAAA,eAAe,CAACF,aAAhB,GAAgCE,eAAe,CAACL,UAAhD;AAEAK,MAAAA,eAAe,CAACH,OAAhB,GAA0B,CAA1B;AAEA,aAAOG,eAAP;AACD;;AAAA;AACF;;AAAA;AACF;;AAAA;AAED,eAAeN,cAAf","sourcesContent":["function SessionRunning({ focusTimer, breakTimer, elapsed, timeRemaining, sessionStatus }) {\r\n  //Set object to be updated every second and returned to update the states\r\n  let sessionStatuses = {\r\n    elapsed: elapsed,\r\n    timeRemaining: timeRemaining,\r\n    sessionStatus: sessionStatus,\r\n    focusTimer: focusTimer,\r\n    breakTimer: breakTimer\r\n  };\r\n\r\n  //Check that the session status is set to Focus\r\n  if (sessionStatuses.sessionStatus === \"Focus\") {\r\n    //Check that the time elapsed is still less than the timer set\r\n    if (sessionStatuses.elapsed < sessionStatuses.focusTimer) {\r\n      //Add 1 second to elapsed\r\n      sessionStatuses.elapsed = sessionStatuses.elapsed + 1;\r\n      //Update timeRemaining with focusTimer-elapsed\r\n      sessionStatuses.timeRemaining = sessionStatuses.focusTimer - sessionStatuses.elapsed;\r\n      //Return the updated sessionStatuses\r\n      return sessionStatuses;\r\n    } else {\r\n      //Focus timer is up, switch status to Break, timeRemaining to breakTimer, and set elapsed to 0\r\n      sessionStatuses.sessionStatus = \"Break\";\r\n\r\n      sessionStatuses.timeRemaining = sessionStatuses.breakTimer;\r\n\r\n      sessionStatuses.elapsed = 0;\r\n\r\n      return sessionStatuses;\r\n    }\r\n  } else {\r\n    //This signifies sessionStatus is set to Break\r\n    //Check that time elapsed is still less than timer set\r\n    if (sessionStatuses.elapsed < sessionStatuses.breakTimer) {\r\n    sessionStatuses.elapsed = sessionStatuses.elapsed + 1;\r\n\r\n    sessionStatuses.timeRemaining = sessionStatuses.breakTimer - elapsed;\r\n\r\n    return sessionStatuses\r\n    } else {\r\n      //Break timer is up, follow same procedure above\r\n      sessionStatuses.sessionStatus = \"Focus\";\r\n\r\n      sessionStatuses.timeRemaining = sessionStatuses.focusTimer;\r\n\r\n      sessionStatuses.elapsed = 0;\r\n\r\n      return sessionStatuses;\r\n    };\r\n  };\r\n};\r\n\r\nexport default SessionRunning;"]},"metadata":{},"sourceType":"module"}