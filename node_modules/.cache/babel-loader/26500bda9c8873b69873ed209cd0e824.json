{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patri\\\\Desktop\\\\Thinkful\\\\React state management\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\components\\\\PercentageBar.js\";\nimport React from \"react\";\nimport { percentage } from \"../sideFunctions/MathEquations\";\n\nfunction PercentageBar({\n  elapsed,\n  sessionStatus,\n  focusTimer,\n  breakTimer,\n  isStopped\n}) {\n  const percComplete = percentage(elapsed, sessionStatus, focusTimer, breakTimer);\n  return !isStopped && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": percComplete // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: percComplete + \"%\"\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 21\n    }\n  })));\n}\n\n;\nexport default PercentageBar;","map":{"version":3,"sources":["C:/Users/patri/Desktop/Thinkful/React state management/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/components/PercentageBar.js"],"names":["React","percentage","PercentageBar","elapsed","sessionStatus","focusTimer","breakTimer","isStopped","percComplete","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,gCAA3B;;AAEA,SAASC,aAAT,CAAuB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,aAAX;AAA0BC,EAAAA,UAA1B;AAAsCC,EAAAA,UAAtC;AAAkDC,EAAAA;AAAlD,CAAvB,EAAsF;AAElF,QAAMC,YAAY,GAAGP,UAAU,CAACE,OAAD,EAAUC,aAAV,EAAyBC,UAAzB,EAAqCC,UAArC,CAA/B;AAEA,SACI,CAACC,SAAD,iBACI,uDACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEE,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACA,IAAA,SAAS,EAAC,cADV;AAEA,IAAA,IAAI,EAAC,aAFL;AAGA,qBAAc,GAHd;AAIA,qBAAc,KAJd;AAKA,qBAAeD,YALf,CAK6B;AAL7B;AAMA,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,EAAEF,YAAY,GAAC;AAAtB,KANP,CAMoC;AANpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CAFR;AAeH;;AAAA;AAED,eAAeN,aAAf","sourcesContent":["import React from \"react\";\r\nimport { percentage } from \"../sideFunctions/MathEquations\";\r\n\r\nfunction PercentageBar({ elapsed, sessionStatus, focusTimer, breakTimer, isStopped }) {\r\n\r\n    const percComplete = percentage(elapsed, sessionStatus, focusTimer, breakTimer);\r\n    \r\n    return (\r\n        !isStopped &&\r\n            <>\r\n                <div className=\"progress\" style={{ height: \"20px\" }}>\r\n                    <div\r\n                    className=\"progress-bar\"\r\n                    role=\"progressbar\"\r\n                    aria-valuemin=\"0\"\r\n                    aria-valuemax=\"100\"\r\n                    aria-valuenow={percComplete} // TODO: Increase aria-valuenow as elapsed time increases\r\n                    style={{ width: percComplete+\"%\" }} // TODO: Increase width % as elapsed time increases\r\n                    />\r\n                </div>\r\n            </>\r\n    );\r\n};\r\n\r\nexport default PercentageBar;"]},"metadata":{},"sourceType":"module"}